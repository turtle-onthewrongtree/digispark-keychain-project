#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <OneButton.h>
#include <avr/sleep.h>

// === OLED Setup ===
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// === Button Setup ===
#define BUTTON_PIN 1
OneButton button(BUTTON_PIN, true);

// === Timings ===
const unsigned long DISPLAY_DURATION = 426000; // 7 min 6 sec
const unsigned long PIXEL_ART_DURATION = 480000; // 8 min
const unsigned long LOVE_MESSAGE_DURATION = 600000; // 10 min

// === Mode Definitions ===
enum Mode {
  CYCLE,
  PIXEL_ART,
  LOVE_MSG,
  WITH_YOU_ALWAYS,
  GOT_YOUR_BACK,
  LIFE_BEST_PART
};

Mode currentMode = CYCLE;
int sentenceIndex = 0;
unsigned long lastChangeTime = 0;
bool stayOnForever = false;

// === Sentences ===
const char* sentences[] = {
  "you can",
  "breathe",
  "you are not\nhere to fit in.\nYou are here\nto rewire the scene"
};

// === Pixel Art Bitmap (128x32) ===
const unsigned char epd_bitmap_1749108719359 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x00, 0x00, 0xff, 0x00, 
	0x00, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x00, 0x00, 0xff, 0x00, 
	0x00, 0x00, 0xf0, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0x00, 
	0x00, 0x00, 0xf0, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0x00, 
	0x00, 0x0f, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 
	0x00, 0x0f, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 
	0x00, 0xff, 0x00, 0x00, 0x00, 0xf0, 0x00, 0xf0, 0xf0, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0x00, 
	0x00, 0xff, 0x00, 0x00, 0x00, 0xf0, 0x00, 0xf0, 0xf0, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0x00, 
	0x0f, 0xff, 0xff, 0x00, 0xff, 0x0f, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x00, 0xf0, 0xf0, 0x00, 
	0x0f, 0xff, 0xff, 0x00, 0xff, 0x0f, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x00, 0xf0, 0xf0, 0x00, 
	0x00, 0x0f, 0x0f, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 
	0x00, 0x0f, 0x0f, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 
	0x00, 0xf0, 0xf0, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00, 
	0x00, 0xf0, 0xf0, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00, 
	0x00, 0xff, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0x00, 
	0x00, 0xff, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0x00
};
// === Setup ===
void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.display();

  button.attachClick(singleClick);
  button.attachDoubleClick(doubleClick);
  button.attachMultiClick(multiClick);

  showCenteredText(sentences[sentenceIndex]);
  lastChangeTime = millis();
}

// === Loop ===
void loop() {
  button.tick();

  if (currentMode == CYCLE && millis() - lastChangeTime >= DISPLAY_DURATION) {
    nextSentence();
  }

  if (!stayOnForever) {
    if (currentMode == PIXEL_ART && millis() - lastChangeTime >= PIXEL_ART_DURATION) {
      goToDeepSleep();
    }
    if (currentMode == LOVE_MSG && millis() - lastChangeTime >= LOVE_MESSAGE_DURATION) {
      goToDeepSleep();
    }
  }
}

// === Button Handlers ===
void singleClick() {
  if (currentMode == CYCLE) {
    nextSentence();
  }
}

void doubleClick() {
  currentMode = PIXEL_ART;
  lastChangeTime = millis();
  showPixelArt();
}

void multiClick(uint8_t clicks) {
  switch (clicks) {
    case 3:
      currentMode = LIFE_BEST_PART;
      showLeftAlignedText("your life was\nmy life's best\npart.");
      break;
    case 4:
      currentMode = LOVE_MSG;
      lastChangeTime = millis();
      showLeftAlignedText("I love you\nLet it rip");
      break;
    case 5:
      currentMode = GOT_YOUR_BACK;
      showLeftAlignedText("don't feel alone and hurt.\nI got your back.");
      break;
    case 8:
      currentMode = WITH_YOU_ALWAYS;
      stayOnForever = true;
      showLeftAlignedText("With you,\nalways.");
      break;
  }
}

// === Sentence Cycle ===
void nextSentence() {
  sentenceIndex++;
  if (sentenceIndex >= 3) {
    goToDeepSleep();
    return;
  }
  showCenteredText(sentences[sentenceIndex]);
  lastChangeTime = millis();
}

// === Display Functions ===
void showCenteredText(const char* text) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setTextWrap(true);

  int lineCount = 1;
  for (const char* p = text; *p; p++) {
    if (*p == '\n') lineCount++;
  }

  int yStart = (SCREEN_HEIGHT - lineCount * 8) / 2;
  display.setCursor(0, yStart);

  char buffer[100];
  strcpy(buffer, text);
  char* line = strtok(buffer, "\n");
  while (line != NULL) {
    int16_t x1, y1;
    uint16_t w, h;
    display.getTextBounds(line, 0, 0, &x1, &y1, &w, &h);
    int x = (SCREEN_WIDTH - w) / 2;
    display.setCursor(x, display.getCursorY());
    display.println(line);
    line = strtok(NULL, "\n");
  }

  display.display();
}

void showLeftAlignedText(const char* text) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.setTextWrap(true);
  display.println(text);
  display.display();
}

void showPixelArt() {
  display.clearDisplay();
  display.drawBitmap(0, 0, epd_bitmap_1749108719359, 128, 32, SSD1306_WHITE);
  display.display();
}

// === Deep Sleep ===
void goToDeepSleep() {
  display.clearDisplay();
  display.display();
  delay(100);
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  sleep_enable();
  sleep_mode();
}
